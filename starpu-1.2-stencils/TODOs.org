* NOTES:
** metrique à étudier pour verifier la perf d'un ordonnanceur :
*** temps execution,
*** volume des transferts gpu,
*** overhead (temps passé à ordonnancer les taches)
* DONE dmdas lors du pop des taches :
  CLOSED: [2016-07-29 Fri 14:32]
** choix des taches dont il dispose deja des donnees
** faire des stats pour savoir le nombre de taches quil parcourt dans la liste
** combien en moyenne on parcours d'elements dans la liste
*** ???: la plupart du temps dmdas ne parcourt qu'un élément de la liste,
*** mais la plupart du temps il n'y en a qu'un seul
** nb element , histogramme , echelle log
** axes abscisses : 1 2 4 8 16 ...
* DONE on peut utiliser oblivious/3 comme reference ideale
  CLOSED: [2016-07-29 Fri 14:33]
*** ???: cache oblivious/3 aussi bien que dmdas
*** mauvais comportement lorsque ça rentre plus en mémoire,
*** et là dmdas fait mieux que parallel cache oblivious
* DONE ou alors on decoupe le domaine en 3 et on soumet les taches en parallele
  CLOSED: [2016-08-09 Tue 18:23]
** DONE semaphore croisée pour la soumission des taches en parallel pour respecter les dependances
   CLOSED: [2016-07-29 Fri 14:34]
** 1 thread de soumission par gpu
** DONE refaire tous les tests avec parallel non boggué
   CLOSED: [2016-08-05 Fri 09:46]
* DONE diag donnees / iterations
  CLOSED: [2016-08-09 Tue 16:56]
** DONE traces fxt, changer l'axe des abscisses
   CLOSED: [2016-08-09 Tue 12:12]
** DONE axes de temps toutes les 10iter par exemple
   CLOSED: [2016-08-09 Tue 16:56]
*** une list de handles avec les jobs associés
* DONE prefetch et stabilisation
  CLOSED: [2016-08-08 Mon 15:34]
** pas de prefetch, regarder que ca se stabilise bien au bout de X iterations
** prefetch pour se debarasser de la partie ou ca se stabilise
** regarder prefetch dmdas quand ca rentre pas en memoire
* DONE --cfg=maxmin/precision:0.0001 pour raccourcir la simulation
  CLOSED: [2016-08-09 Tue 12:11]
* DONE configure details
  CLOSED: [2016-08-09 Tue 12:12]
* DONE co_limit300 decaler les x vers la gauche
  CLOSED: [2016-08-09 Tue 12:12]
** retravailler le prefetch: rep de charge
* DONE rajouter prefetch idle lorsque cache oblivious et alternate submit
  CLOSED: [2016-08-09 Tue 12:12]
** 3 type de task :
*** fetch
*** prefetc 10 task
*** prefetch idle 1 task (lowest priority)
* DONE alterner submit des x pair/impair
  CLOSED: [2016-08-11 Thu 13:44]
** enlever le flag W sur les voisins
*** ???: pourquoi voulait-on faire ça ?
*** sinon c'est pas un stencil
** cache oblivious devrait rester correct au niveau des dependances
** DONE refaire tous les tests avec alternate submit
   CLOSED: [2016-08-05 Fri 09:45]
** DONE bug arbiter ??
   CLOSED: [2016-08-11 Thu 13:44]
* DONE facteur 6 ou 20 size / limitmem
  CLOSED: [2016-08-11 Thu 13:44]

* DONE / cout func par 2 pour loca.c
  CLOSED: [2016-08-12 Fri 10:06]
* DONE nombre de isochrone: racine (n/2)
  CLOSED: [2016-08-12 Fri 10:22]
* TODO comment le LRU se comporte
** quels sont les données evincées
** LRU + stencil : biblio
*** optimal : 1 LRU -> cache oblivious
*** nGPUs LRu -> ???
* DONE jouer avec STARPU_BETA = 1.2 par ex
  CLOSED: [2016-08-31 Wed 16:57]
** rajouter sur les pdf cache_oblivious_*.pdf dmdas_B_1.2 etc
** TODO 0.1 voir 0.01 0.7 0.9 1.1 1.3 10
* DONE bug cache oblivious parallele au niveau des dep
  CLOSED: [2016-08-16 Tue 15:39]
* DONE sched prio (eager+prio)
  CLOSED: [2016-08-16 Tue 17:09]
** DONE task priority (based on iter)
   CLOSED: [2016-08-12 Fri 12:15]
** DONE 4 colors for 8 CPUs (No GPUs)
   CLOSED: [2016-08-16 Tue 17:09]
* DONE pour le decoupage on peut regarder :
  CLOSED: [2016-08-31 Wed 16:57]
** DONE static sans prendre en compte la charge
    CLOSED: [2016-07-29 Fri 14:33]
*** ???: c'est déjà pas bon du tout avec charge équilibré par rapport à dmdas
** TODO static avec une charge qui depend de x
** TODO dynamique (charge depend de x et t)
* DONE sched modular_heft
  CLOSED: [2016-08-31 Wed 16:57]
* TODO generer un exemple + figure + traces
** pour chaque cas.. chaque algo etc (pour le rapport et comme reference pour l'equipe)
* TODO references
** ref externe sur adaptive mesh refinement (AMR)
** partitionnement pour rep de charge
* DONE commentaires dans le code, juste les *.c, bien specifier les unites des parametres
  CLOSED: [2016-08-31 Wed 16:56]
* TODO starpu_bus_stat
** transferts memoires
** pourquoi dmdar tient tete a cachoe oblivious malgre les transferts ? recouvrement
* TODO donner les sources de toutes les courbes
** bien precifer les conditions d'experimentation
* TODO charge: dmdar + co 2 GPU
* TODO charge dyn, prendre 1/4 du domaine faire bouger le curseur une seule fois
* TODO sans limite memoire pour l'instant
